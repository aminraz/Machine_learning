#+PROPERTY: header-args:python :session *_bank_data* :results silent
#+PROPERTY: header-args:gnuplot :eval no
#+title: Data visualization using Gnuplot
* Import

#+begin_src python
  import numpy as np
  import pandas as pd
  import matplotlib.pyplot as plt
#+end_src

* Data visualization 

#+begin_src python :results replace output
  df = pd.read_csv("train.csv", index_col = "id")
  df.info()
#+end_src

#+begin_example
<class 'pandas.core.frame.DataFrame'>
Index: 750000 entries, 0 to 749999
Data columns (total 17 columns):
 #   Column     Non-Null Count   Dtype 
---  ------     --------------   ----- 
 0   age        750000 non-null  int64 
 1   job        750000 non-null  object
 2   marital    750000 non-null  object
 3   education  750000 non-null  object
 4   default    750000 non-null  object
 5   balance    750000 non-null  int64 
 6   housing    750000 non-null  object
 7   loan       750000 non-null  object
 8   contact    750000 non-null  object
 9   day        750000 non-null  int64 
 10  month      750000 non-null  object
 11  duration   750000 non-null  int64 
 12  campaign   750000 non-null  int64 
 13  pdays      750000 non-null  int64 
 14  previous   750000 non-null  int64 
 15  poutcome   750000 non-null  object
 16  y          750000 non-null  int64 
dtypes: int64(8), object(9)
memory usage: 103.0+ MB
#+end_example

The aim is to predict correct class coded in ~y~:
#+begin_src python :results replace value 
  df.y.value_counts()
#+end_src

: y
: 0    659512
: 1     90488
: Name: count, dtype: int64

I use Gnuplot to plot histogram of different columns. Gnuplot does not need to load the data into a container; it reads directly from the csv file. 

I first save some basic stats for different columns into variables inside gnuplot; these will be used for plotting later. 
#+begin_src gnuplot
  set datafile separator comma
  all_col = system("head -n 1 train.csv")
  all_col = split(all_col, ",")
  array ratio_type_col[6] = [2, 7, 13, 14, 15, 16]
  do for [i = 1:6] {
      stats "train.csv" u ratio_type_col[i] name all_col[ratio_type_col[i]] nooutput
  }
#+end_src

#+begin_src gnuplot :file age_hist.png
  set term png background rgb "grey80" size 500,400
  set termoption noenhanced
  mean_value =  value(all_col[ratio_type_col[1]]."_mean")
  min_value =  value(all_col[ratio_type_col[1]]."_min")
  max_value  =  value(all_col[ratio_type_col[1]]."_max")
  set xtics (30,50, 60, 70, 80) out rotate by -45 add (sprintf("mean = %.1f",mean_value) mean_value, sprintf("min = %.1f",min_value) min_value, sprintf("max = %.1f",max_value)  max_value) nomirror
  set ytics autofreq format "%.1e"
  set ylabel "frequency"
  set title "Histogram with 100 bins"
  set xrange [min_value:max_value]
  plot "train.csv"  u ratio_type_col[1]:(1) bins = 100 w boxes lc rgb "black" fs solid .4 title all_col[ratio_type_col[1]]
#+end_src

[[file:images/age_hist.png]]

#+begin_src gnuplot :file balance_hist.png
  reset
  set datafile separator comma
  set term png background rgb "grey80" size 500,400
  set termoption noenhanced
  mean_value =  value(all_col[ratio_type_col[2]]."_mean")
  min_value =  value(all_col[ratio_type_col[2]]."_min")
  max_value  =  value(all_col[ratio_type_col[2]]."_max")
  set xtics (20000, 40000, 60000, 80000)  out rotate by -45 add (sprintf("mean = %.1f",mean_value) mean_value, sprintf("min = %.1f",min_value) min_value, sprintf("max = %.1f",max_value)  max_value) nomirror
  set ytics autofreq format "%.1e"
  set ylabel "frequency"
  set title "Histogram with 100 bins"
  set xrange [min_value:max_value]
  plot "train.csv"  u ratio_type_col[2]:(1) bins = 100 w boxes lc rgb "black" fs solid .4 title all_col[ratio_type_col[2]]
#+end_src

[[file:images/balance_hist.png]]

#+begin_src gnuplot :file duration_hist.png
  reset
  set datafile separator comma
  set term png background rgb "grey80" size 500,400
  set termoption noenhanced
  mean_value =  value(all_col[ratio_type_col[3]]."_mean")
  min_value =  value(all_col[ratio_type_col[3]]."_min")
  max_value  =  value(all_col[ratio_type_col[3]]."_max")
  set xtics (1000, 1500, 2000) out rotate by -45 add (sprintf("mean = %.1f",mean_value) mean_value, sprintf("min = %.1f",min_value) min_value, sprintf("max = %.1f",max_value)  max_value) nomirror
  set ytics autofreq format "%.1e"
  set ylabel "frequency"
  set title "Histogram with 100 bins"
  set xrange [min_value:max_value]
  plot "train.csv"  u ratio_type_col[3]:(1) bins = 100 w boxes lc rgb "black" fs solid .4 title all_col[ratio_type_col[3]]
#+end_src

[[file:images/duration_hist.png]]

#+begin_src gnuplot :file capmaign_hist.png
  reset
  set datafile separator comma
  set term png background rgb "grey80" size 500,400
  set termoption noenhanced
  mean_value =  value(all_col[ratio_type_col[4]]."_mean")
  min_value =  value(all_col[ratio_type_col[4]]."_min")
  max_value  =  value(all_col[ratio_type_col[4]]."_max")
  set xtics (10, 20, 30, 40, 50) out rotate by -45 add (sprintf("mean = %.1f \n\nmin = %.1f",mean_value, min_value) mean_value, sprintf("max = %.1f",max_value)  max_value) nomirror
  set ytics autofreq format "%.1e"
  set ylabel "frequency"
  set title "Histogram with 100 bins"
  set xrange [min_value:max_value]
  plot "train.csv"  u ratio_type_col[4]:(1) bins = 100 w boxes lc rgb "black" fs solid .4 title all_col[ratio_type_col[4]]
#+end_src

[[file:images/capmaign_hist.png]]

#+begin_src gnuplot :file pdays_hist.png
  reset
  set datafile separator comma
  set term png background rgb "grey80" size 500,400
  set termoption noenhanced
  mean_value =  value(all_col[ratio_type_col[5]]."_mean")
  min_value =  value(all_col[ratio_type_col[5]]."_min")
  max_value  =  value(all_col[ratio_type_col[5]]."_max")
  set xtics (100, 200, 300, 400, 500, 600, 700) out rotate by -45 add (sprintf("mean = %.1f \n\nmin = %.1f",mean_value, min_value) mean_value, sprintf("max = %.1f",max_value)  max_value) nomirror
  set ytics autofreq format "%.1e"
  set ylabel "frequency"
  set title "Histogram with 100 bins"
  set xrange [min_value:max_value]
  plot "train.csv"  u ratio_type_col[5]:(1) bins = 100 w boxes lc rgb "black" fs solid .4 title all_col[ratio_type_col[5]]
#+end_src

[[file:images/pdays_hist.png]]

#+begin_src gnuplot :file previous_hist.png
  reset
  set datafile separator comma
  set term png background rgb "grey80" size 500,400
  set termoption noenhanced
  mean_value = value(all_col[ratio_type_col[6]]."_mean")
  min_value = value(all_col[ratio_type_col[6]]."_min")
  max_value = value(all_col[ratio_type_col[6]]."_max")
  set xtics  out rotate by -45 add (sprintf("mean = %.1f \n\nmin = %.1f",mean_value, min_value) mean_value, sprintf("max = %.1f",max_value)  max_value) nomirror
  set ytics autofreq format "%.1e"
  set ylabel "frequency"
  set title "Histogram with 100 bins"
  set xrange [min_value:max_value]
  plot "train.csv"  u ratio_type_col[6]:(1) bins = 100 w boxes lc rgb "black" fs solid .4 title all_col[ratio_type_col[6]]
#+end_src

[[file:images/previous_hist.png]]

Using pandas we can visualize the frequency of different categories in categorical columns:
#+begin_src python :eval no 
  fig, ax = plt.subplots(6,2,figsize=(10,15))
  fig.suptitle("Normalized frequencies for different categories in categorical columns\n")
  ax=ax.flatten()
  for i,col in enumerate(df.select_dtypes("category").columns):
      df[col].value_counts(normalize=True).plot(kind="bar", ax=ax[i])
      plt.tight_layout()
  plt.savefig("hist_bundle.png")
#+end_src

[[file:images/hist_bundle.png]]

